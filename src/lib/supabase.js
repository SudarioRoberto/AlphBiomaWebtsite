import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.SUPABASE_URL;
const supabaseKey = import.meta.env.SUPABASE_KEY;

console.log('üìä Conectando ao Supabase...');
console.log('URL:', supabaseUrl?.slice(0, 20) + '...');
console.log('Key:', supabaseKey?.slice(0, 5) + '...');

// Aplicar configura√ß√£o otimizada para opera√ß√µes mais robustas
export const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: {
    persistSession: false, // N√£o persistir a sess√£o em armazenamento local
    autoRefreshToken: false // N√£o atualizar token automaticamente
  },
  // Configura√ß√µes globais para melhorar consist√™ncia
  global: {
    fetch: (...args) => fetch(...args)
  },
  // Aumentar timeout para opera√ß√µes complexas
  realtime: {
    timeout: 30000 // 30 segundos
  }
});

// Fun√ß√£o utilit√°ria para debug
export const logSupabaseResponse = (operation, error, data) => {
  if (error) {
    console.error(`‚ùå Erro Supabase (${operation}):`, error);
    return false;
  }
  
  console.log(`‚úÖ Supabase (${operation}):`, data ? 'Dados recebidos' : 'Opera√ß√£o conclu√≠da');
  return true;
};

// Fun√ß√£o para verificar se a conex√£o est√° funcionando
export async function testSupabaseConnection() {
  try {
    const { data, error } = await supabase
      .from('projects')
      .select('count')
      .limit(1);
      
    if (error) throw error;
    return { success: true, message: 'Conex√£o Supabase funcionando!' };
  } catch (error) {
    console.error('Erro ao testar conex√£o Supabase:', error);
    return { success: false, message: error.message || 'Falha na conex√£o' };
  }
}