---
// Página de dashboard do cliente com ID dinâmico
import Layout from '../../layouts/Layout.astro';
import { supabase } from '../../lib/supabase.js';

export const prerender = false;
const { cookies } = Astro;
const isClientAuth = cookies.get('client_auth')?.value === 'true';
const projectId = cookies.get('client_project_id')?.value;

if (!isClientAuth || !projectId) {
  return Astro.redirect('/login');
}

// Buscar informações do projeto
const { data: project, error: projectError } = await supabase
  .from('projects')
  .select('name, status, sample_count, project_id, email')
  .eq('id', projectId)
  .single();

const { data: samples, error: samplesError } = await supabase
  .from('generic_samples')
  .select('*')
  .eq('project_id', projectId);

if (projectError || samplesError) {
  console.error('Erro Supabase:', projectError, samplesError);
  return Astro.redirect('/login?error=dados');
}

// Pipeline e controle
const pipelineSteps = [
  { id: 'projeto-gerado', label: 'Projeto gerado', description: 'Estamos preparando seu material de coleta.' },
  { id: 'material-enviado', label: 'Material enviado', description: 'Material de coleta está a caminho.' },
  { id: 'material-entregue', label: 'Material entregue', description: 'Pronto para iniciar a coleta.' },
  { id: 'amostras-coletadas', label: 'Amostras coletadas', description: 'Dados registrados no sistema.' },
  { id: 'amostras-enviadas', label: 'Amostras enviadas', description: 'Amostras a caminho do laboratório.' },
  { id: 'dna-extraido', label: 'DNA extraído', description: 'Extração em andamento.' },
  { id: 'dna-amplificado', label: 'DNA amplificado', description: 'Preparando para sequenciamento.' },
  { id: 'dna-sequenciado', label: 'DNA sequenciado', description: 'Alta tecnologia em ação.' },
  { id: 'analisando-dados', label: 'Analisando dados', description: 'Usando IA para entender o microbioma.' },
  { id: 'gerando-relatorio', label: 'Gerando relatório', description: 'Montando insights para você.' },
  { id: 'relatorio-entregue', label: 'Relatório entregue', description: 'Seu resultado está pronto!' },
];

const normalizedStatus = (project?.status || '').toLowerCase().trim();

const currentStepIndex = pipelineSteps.findIndex(step =>
  step.label.toLowerCase().trim() === normalizedStatus
);

const currentStep = currentStepIndex >= 0 ? currentStepIndex : 0;

const canAddSamples = ['material entregue', 'amostras coletadas'].includes(normalizedStatus);
---

<Layout>
  <section class="min-h-screen bg-gradient-to-br from-blue-950 to-black text-white">
    <nav class="bg-white/10 backdrop-blur-xl border-b border-white/10 px-6 py-4 flex justify-between items-center">
      <!-- Lado esquerdo: título -->
      <div>
        <h1 class="text-2xl font-bold text-white">AlphaBioma</h1>
        <p class="text-white/70 text-sm">Portal do Cliente</p>
      </div>
    
      <!-- Lado direito: informações + botão -->
      <div class="flex items-center gap-4">
        <!-- Info do cliente (escondido em telas pequenas) -->
        {project && (
          <div class="text-right hidden md:block">
            <p class="text-white font-medium">{project.name}</p>
            <p class="text-white/70 text-sm">{project.email}</p>
          </div>
        )}
    
        <!-- Botão de logout visível sempre -->
        <form method="POST" action="/api/client-logout">
          <button type="submit" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1m0-10V5" />
            </svg>
            Sair
          </button>
        </form>
      </div>
    </nav>
        
    <main class="max-w-6xl mx-auto px-6 py-12">
      {project ? (
        <div>
          <div class="space-y-12">
            <!-- Header do projeto -->
            <div class="bg-white/5 border border-white/10 rounded-2xl p-6">
              <div class="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                <div>
                  <h2 class="text-3xl font-bold text-white">{project.name}</h2>
                  <p class="text-white/70">ID do Projeto: {project.project_id}</p>
                </div>
                
                <div class="flex flex-wrap gap-4">
                  <div class="bg-white/10 px-4 py-2 rounded-xl flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <span class="text-sm font-medium">{project.status}</span>
                  </div>
                  
                  <div class="bg-white/10 px-4 py-2 rounded-xl flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                    <span class="text-sm font-medium">{project.sample_count || 0} amostras</span>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Pipeline de status do projeto -->
            <div class="bg-white/5 border border-white/10 rounded-2xl p-6">
              <h3 class="text-xl font-bold text-white mb-6">Status do Projeto</h3>
              
              <div class="relative">
                <!-- Linha de progresso -->
                <div class="absolute left-0 top-6 w-full h-0.5 bg-white/10"></div>
                <div 
                  class="absolute left-0 top-6 h-0.5 bg-blue-500 transition-all duration-500"
                  style={`width: ${Math.max(5, (currentStep / (pipelineSteps.length - 1)) * 100)}%`}
                ></div>
                
                <!-- Steps do progresso -->
                <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6 relative">
                  {pipelineSteps.map((step, index) => (
                    <div class="relative">
                      <div 
                        class={`w-12 h-12 rounded-full flex items-center justify-center mx-auto relative z-10 border-2 ${
                          index <= currentStep 
                            ? 'bg-blue-500 border-blue-700 text-white' 
                            : 'bg-white/5 border-white/20 text-white/50'
                        }`}
                      >
                        {index <= currentStep ? (
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                          </svg>
                        ) : (
                          <span class="text-sm">{index + 1}</span>
                        )}
                      </div>
                      
                      <div class={`text-center mt-3 ${index <= currentStep ? 'text-white' : 'text-white/50'}`}>
                        <p class="text-sm font-medium">{step.label}</p>
                        <p class="text-xs mt-1 hidden md:block">{step.description}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
            
            <!-- Seção de Amostras -->
            <div class="bg-white/5 border border-white/10 rounded-2xl p-6">
              <div class="flex justify-between items-center mb-6">
                <h3 class="text-xl font-bold text-white">Suas Amostras</h3>
                
                {canAddSamples && (
                  <button 
                    id="addSamplesBtn"
                    class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition flex items-center gap-2"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    Adicionar Amostras
                  </button>
                )}
              </div>
              
              <!-- Área para adicionar amostras (escondida por padrão) -->
              <div id="addSamplesArea" class="hidden mb-8 bg-white/5 border border-white/10 rounded-xl p-4">
                <h4 class="text-lg font-bold text-white mb-4">Adicionar Amostras em Lote</h4>
                
                <form id="batchSampleForm">
                  <input type="hidden" name="project_id" value={projectId} />
                  
                  <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                    <div>
                      <label class="block text-sm font-medium text-white/70 mb-1">Padrão ID Amostra</label>
                      <input 
                        type="text" 
                        id="sampleIdPattern" 
                        name="pattern" 
                        value="SAMPLE-#" 
                        placeholder="ex: SAMPLE-#" 
                        class="w-full bg-white/5 border border-white/20 rounded-lg p-2 text-white"
                      />
                      <p class="text-xs text-white/50 mt-1">Use # para substituir pelo número</p>
                    </div>
                    <div>
                      <label class="block text-sm font-medium text-white/70 mb-1">Número Inicial</label>
                      <input 
                        type="number" 
                        id="startNumber" 
                        name="start_number" 
                        value="1" 
                        min="1" 
                        class="w-full bg-white/5 border border-white/20 rounded-lg p-2 text-white"
                      />
                    </div>
                    
                    <div>
                      <label class="block text-sm font-medium text-white/70 mb-1">Quantidade</label>
                      <input 
                        type="number" 
                        id="batchCount" 
                        name="batch_count" 
                        value="5" 
                        min="1" 
                        max="100" 
                        class="w-full bg-white/5 border border-white/20 rounded-lg p-2 text-white"
                      />
                    </div>
                  </div>
                  
                  <div class="bg-white/5 rounded-lg overflow-hidden mb-4">
                    <table class="w-full">
                      <thead class="bg-white/10 text-left">
                        <tr>
                          <th class="p-3 text-sm font-medium text-white/80">ID Amostra</th>
                          <th class="p-3 text-sm font-medium text-white/80">ID Animal</th>
                          <th class="p-3 text-sm font-medium text-white/80">Tratamento</th>
                          <th class="p-3 text-sm font-medium text-white/80">Observação</th>
                        </tr>
                      </thead>
                      <tbody id="sampleTableBody">
                        <!-- Rows will be filled by JavaScript -->
                      </tbody>
                    </table>
                  </div>
                  
                  <div class="flex justify-end gap-3">
                    <button 
                      type="button" 
                      id="cancelAddSamples"
                      class="bg-white/5 hover:bg-white/10 text-white px-4 py-2 rounded-lg transition"
                    >
                      Cancelar
                    </button>
                    
                    <button 
                      type="submit" 
                      class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition flex items-center gap-2"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                      </svg>
                      Salvar Amostras
                    </button>
                  </div>
                </form>
              </div>
              
              <!-- Tabela de amostras existentes -->
              {samples && samples.length > 0 ? (
                <div class="bg-white/5 rounded-lg overflow-hidden">
                  <table class="w-full">
                    <thead class="bg-white/10 text-left">
                      <tr>
                        <th class="p-3 text-sm font-medium text-white/80">ID Amostra</th>
                        <th class="p-3 text-sm font-medium text-white/80">ID Animal</th>
                        <th class="p-3 text-sm font-medium text-white/80">Tratamento</th>
                        <th class="p-3 text-sm font-medium text-white/80">Data de Registro</th>
                        <th class="p-3 text-sm font-medium text-white/80">Observação</th>
                      </tr>
                    </thead>
                    <tbody>
                      {samples.map(sample => (
                        <tr class="border-b border-white/5">
                          <td class="p-3 text-sm">{sample.sample_id}</td>
                          <td class="p-3 text-sm">{sample.animal_id || '-'}</td>
                          <td class="p-3 text-sm">{sample.treatment || '-'}</td>
                          <td class="p-3 text-sm">{new Date(sample.created_at).toLocaleDateString()}</td>
                          <td class="p-3 text-sm">{sample.observation || '-'}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              ) : (
                <div id="noSamplesArea" class="text-center py-10 bg-white/5 rounded-xl border border-white/10">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-white/30 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                  </svg>
                  <p class="text-lg text-white/70">Nenhuma amostra registrada ainda.</p>
                  {canAddSamples && (
                    <button 
                      id="noSamplesAdd"
                      class="mt-4 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition inline-flex items-center gap-2"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                      </svg>
                      Adicionar Amostras
                    </button>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      ) : (
        <div class="text-center py-12 bg-white/5 rounded-2xl border border-white/10">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-white/30 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
          <p class="text-2xl text-white/70">Erro ao carregar informações do projeto.</p>
          <p class="mt-2 text-white/50">Por favor, tente novamente mais tarde ou entre em contato com o suporte.</p>
          <a href="/login" class="mt-6 inline-block bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition">
            Voltar para Login
          </a>
        </div>
      )}
    </main>
  </section>
</Layout>


<script>
  // Scripts para adicionar amostras de forma dinâmica
  document.addEventListener('DOMContentLoaded', () => {
    const addSamplesBtn = document.getElementById('addSamplesBtn');
    const cancelAddBtn = document.getElementById('cancelAddSamples');
    const noSamplesAddBtn = document.getElementById('noSamplesAdd');
    const addSamplesArea = document.getElementById('addSamplesArea');
    const sampleTableBody = document.getElementById('sampleTableBody');
    const sampleIdPattern = document.getElementById('sampleIdPattern');
    const startNumber = document.getElementById('startNumber');
    const batchCount = document.getElementById('batchCount');
    const batchSampleForm = document.getElementById('batchSampleForm');
    
    // Função para mostrar a área de adicionar amostras
    const showAddSamplesArea = () => {
      if (addSamplesArea) {
        addSamplesArea.classList.remove('hidden');
        generateSampleRows();
      }
    };
    
    // Função para esconder a área de adicionar amostras
    const hideAddSamplesArea = () => {
      if (addSamplesArea) {
        addSamplesArea.classList.add('hidden');
      }
    };
    
    // Adicionar event listeners
    if (addSamplesBtn) {
      addSamplesBtn.addEventListener('click', showAddSamplesArea);
    }
    
    if (noSamplesAddBtn) {
      noSamplesAddBtn.addEventListener('click', showAddSamplesArea);
    }
    
    if (cancelAddBtn) {
      cancelAddBtn.addEventListener('click', hideAddSamplesArea);
    }
    
    // Função para gerar as linhas da tabela de amostras
    const generateSampleRows = () => {
      if (!sampleTableBody || !sampleIdPattern || !startNumber || !batchCount) return;
      
      const pattern = sampleIdPattern.value || 'SAMPLE-#';
      const start = parseInt(startNumber.value) || 1;
      const count = parseInt(batchCount.value) || 5;
      
      sampleTableBody.innerHTML = '';
      
      for (let i = 0; i < count; i++) {
        const num = start + i;
        const paddedNum = num.toString().padStart(3, '0');
        const sampleId = pattern.replace('#', paddedNum);
        
        const row = document.createElement('tr');
        row.className = 'border-b border-white/5';
        row.innerHTML = `
          <td class="p-2">
            <input type="text" name="sample_ids[]" value="${sampleId}" readonly class="w-full bg-white/5 border border-white/20 rounded p-1 text-white text-sm">
          </td>
          <td class="p-2">
            <input type="text" name="animal_ids[]" placeholder="ID Animal" class="w-full bg-white/5 border border-white/20 rounded p-1 text-white text-sm">
          </td>
          <td class="p-2">
            <input type="text" name="treatments[]" placeholder="Tratamento" class="w-full bg-white/5 border border-white/20 rounded p-1 text-white text-sm">
          </td>
          <td class="p-2">
            <input type="text" name="observations[]" placeholder="Observação (opcional)" class="w-full bg-white/5 border border-white/20 rounded p-1 text-white text-sm">
          </td>
        `;
        
        sampleTableBody.appendChild(row);
      }
    };
    
    // Reagir a mudanças nos campos de configuração
    if (sampleIdPattern && startNumber && batchCount) {
      sampleIdPattern.addEventListener('input', generateSampleRows);
      startNumber.addEventListener('input', generateSampleRows);
      batchCount.addEventListener('input', generateSampleRows);
    }
    
    // Processar o envio do formulário
    if (batchSampleForm) {
      batchSampleForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(batchSampleForm);
        
        try {
          // Mostrar feedback de carregamento
          const submitBtn = batchSampleForm.querySelector('button[type="submit"]');
          const originalText = submitBtn.innerHTML;
          submitBtn.innerHTML = `
            <svg class="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Salvando...
          `;
          submitBtn.disabled = true;
          
          const response = await fetch('/api/add-batch-samples', {
            method: 'POST',
            body: formData
          });
          
          if (response.ok) {
            // Recarregar a página para mostrar as novas amostras
            window.location.reload();
          } else {
            const errorData = await response.json();
            alert(`Erro ao adicionar amostras: ${errorData.message || 'Por favor, tente novamente.'}`);
            
            // Restaurar o botão
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
          }
        } catch (error) {
          console.error('Erro ao enviar amostras:', error);
          alert('Ocorreu um erro. Por favor, tente novamente mais tarde.');
          
          // Restaurar o botão
          const submitBtn = batchSampleForm.querySelector('button[type="submit"]');
          submitBtn.innerHTML = originalText;
          submitBtn.disabled = false;
        }
      });
    }
  });
</script>